$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 H clk $end
  $var wire  1 I reset $end
  $scope module ADR_core $end
   $var wire  1 H clk $end
   $var wire 32 P de_ex_data_a [31:0] $end
   $var wire 32 Q de_ex_data_b [31:0] $end
   $var wire 32 R de_ex_data_imm [31:0] $end
   $var wire  6 O de_ex_optype [5:0] $end
   $var wire 32 & de_ex_pc [31:0] $end
   $var wire 32 N if_de_inst [31:0] $end
   $var wire 32 % if_de_pc [31:0] $end
   $var wire  5 K read_addr_a [4:0] $end
   $var wire  5 L read_addr_b [4:0] $end
   $var wire 32 # read_data_a [31:0] $end
   $var wire 32 $ read_data_b [31:0] $end
   $var wire  1 I reset $end
   $var wire  5 M write_addr [4:0] $end
   $var wire 32 J write_data [31:0] $end
   $scope module decode $end
    $var wire  1 H clk $end
    $var wire 32 P de_ex_data_a_o [31:0] $end
    $var wire 32 Q de_ex_data_b_o [31:0] $end
    $var wire 32 R de_ex_data_imm_o [31:0] $end
    $var wire  6 O de_ex_optype_o [5:0] $end
    $var wire 32 & de_ex_pc_o [31:0] $end
    $var wire  5 K de_regfile_addr_a_o [4:0] $end
    $var wire  5 L de_regfile_addr_b_o [4:0] $end
    $var wire 32 N if_de_inst_i [31:0] $end
    $var wire 32 % if_de_pc_i [31:0] $end
    $var wire 32 [ immediate [31:0] $end
    $var wire  7 S opcode [6:0] $end
    $var wire  6 Y optype [5:0] $end
    $var wire 32 # regfile_de_data_a_i [31:0] $end
    $var wire 32 $ regfile_de_data_b_i [31:0] $end
    $var wire  1 I reset $end
    $var wire  7 S segment_1 [6:0] $end
    $var wire  5 T segment_2 [4:0] $end
    $var wire  3 U segment_3 [2:0] $end
    $var wire  5 V segment_4 [4:0] $end
    $var wire  5 W segment_5 [4:0] $end
    $var wire  7 X segment_6 [6:0] $end
    $var wire  1 Z sign_bit $end
   $upscope $end
   $scope module fetch $end
    $var wire  1 H clk $end
    $var wire 32 N if_de_inst_o [31:0] $end
    $var wire 32 % if_de_pc_o [31:0] $end
    $var wire 32 ' next_program_counter [31:0] $end
    $var wire 32 % program_counter [31:0] $end
    $var wire  1 I reset $end
   $upscope $end
   $scope module register_file $end
    $var wire  1 H clk $end
    $var wire  5 K read_addr_a_i [4:0] $end
    $var wire  5 L read_addr_b_i [4:0] $end
    $var wire 32 # read_data_a_o [31:0] $end
    $var wire 32 $ read_data_b_o [31:0] $end
    $var wire 32 ( register_file[0] [31:0] $end
    $var wire 32 2 register_file[10] [31:0] $end
    $var wire 32 3 register_file[11] [31:0] $end
    $var wire 32 4 register_file[12] [31:0] $end
    $var wire 32 5 register_file[13] [31:0] $end
    $var wire 32 6 register_file[14] [31:0] $end
    $var wire 32 7 register_file[15] [31:0] $end
    $var wire 32 8 register_file[16] [31:0] $end
    $var wire 32 9 register_file[17] [31:0] $end
    $var wire 32 : register_file[18] [31:0] $end
    $var wire 32 ; register_file[19] [31:0] $end
    $var wire 32 ) register_file[1] [31:0] $end
    $var wire 32 < register_file[20] [31:0] $end
    $var wire 32 = register_file[21] [31:0] $end
    $var wire 32 > register_file[22] [31:0] $end
    $var wire 32 ? register_file[23] [31:0] $end
    $var wire 32 @ register_file[24] [31:0] $end
    $var wire 32 A register_file[25] [31:0] $end
    $var wire 32 B register_file[26] [31:0] $end
    $var wire 32 C register_file[27] [31:0] $end
    $var wire 32 D register_file[28] [31:0] $end
    $var wire 32 E register_file[29] [31:0] $end
    $var wire 32 * register_file[2] [31:0] $end
    $var wire 32 F register_file[30] [31:0] $end
    $var wire 32 G register_file[31] [31:0] $end
    $var wire 32 + register_file[3] [31:0] $end
    $var wire 32 , register_file[4] [31:0] $end
    $var wire 32 - register_file[5] [31:0] $end
    $var wire 32 . register_file[6] [31:0] $end
    $var wire 32 / register_file[7] [31:0] $end
    $var wire 32 0 register_file[8] [31:0] $end
    $var wire 32 1 register_file[9] [31:0] $end
    $var wire  1 I reset $end
    $var wire  5 M write_addr_i [4:0] $end
    $var wire 32 J write_data_i [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000001 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
1H
0I
b00000000000000000000000000000000 J
b00000 K
b00000 L
b00000 M
b00000000000000000000000000000000 N
b000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b0000000 S
b00000 T
b000 U
b00000 V
b00000 W
b0000000 X
b000000 Y
0Z
b00000000000000000000000000000000 [
#1
0H
#2
b00000000000000000000000000000001 %
b00000000000000000000000000000010 '
1H
#3
0H
#4
b00000000000000000000000000000010 %
b00000000000000000000000000000001 &
b00000000000000000000000000000011 '
1H
#5
0H
#6
b00000000000000000000000000000011 %
b00000000000000000000000000000010 &
b00000000000000000000000000000100 '
1H
#7
0H
#8
b00000000000000000000000000000100 %
b00000000000000000000000000000011 &
b00000000000000000000000000000101 '
1H
#9
0H
#10
b00000000000000000000000000000101 %
b00000000000000000000000000000100 &
b00000000000000000000000000000110 '
1H
#11
0H
#12
b00000000000000000000000000000110 %
b00000000000000000000000000000101 &
b00000000000000000000000000000111 '
1H
#13
0H
#14
b00000000000000000000000000000111 %
b00000000000000000000000000000110 &
b00000000000000000000000000001000 '
1H
#15
0H
#16
b00000000000000000000000000001000 %
b00000000000000000000000000000111 &
b00000000000000000000000000001001 '
1H
#17
0H
#18
b00000000000000000000000000001001 %
b00000000000000000000000000001000 &
b00000000000000000000000000001010 '
1H
#19
0H
